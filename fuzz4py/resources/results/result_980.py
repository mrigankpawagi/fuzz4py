Return Code: 1
Stdout: b'Result for input [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]: 45, time taken: 0.014559745788574219\n'
Stderr: b'Exception in thread Thread-1 (<lambda>):\nException in thread Thread-2 (<lambda>):\nTraceback (most recent call last):\nTraceback (most recent call last):\nTraceback (most recent call last):\n  File "/home/mrigankp/fuzz4py/cpython/Lib/threading.py", line 1041, in _bootstrap_inner\n    self.run()\n    ~~~~~~~~^^\n  File "/home/mrigankp/fuzz4py/cpython/Lib/threading.py", line 1041, in _bootstrap_inner\n    self.run()\n    ~~~~~~~~^^\n  File "/home/mrigankp/fuzz4py/cpython/Lib/threading.py", line 992, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "/home/mrigankp/fuzz4py/cpython/Lib/threading.py", line 992, in run\n    self._target(*self._args, **self._kwargs)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 19, in <lambda>\n    t = threading.Thread(target=lambda: db.set(\'key\', str(random.randint(1,10000))))\n                                        ^^^^^^\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 25, in my_function\n    result += item\nAttributeError: \'_Database\' object has no attribute \'set\'. Did you mean: \'get\'?\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 19, in <lambda>\n    t = threading.Thread(target=lambda: db.set(\'key\', str(random.randint(1,10000))))\n                                        ^^^^^^\nTypeError: unsupported operand type(s) for +=: \'int\' and \'str\'\nAttributeError: \'_Database\' object has no attribute \'set\'. Did you mean: \'get\'?\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 51, in <module>\n    main()\n    ~~~~^^\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 39, in main\n    result = my_function(data)\n  File "/home/mrigankp/fuzz4py/fuzz4py/inputs/980.py", line 28, in my_function\n    except (TypeError, ValueError, dbm.error) as e:\n        print(f"An error occurred: {e}")\n        return -1\nTypeError: catching classes that do not inherit from BaseException is not allowed\n'

{
    "apis": [
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser(prog='myprogram',\n                                     description='What the program does',\n                                     epilog='Text at the bottom of help')\n    parser.print_help()\n\ntest()\n"
            ],
            "description": "Create a new ArgumentParser object.",
            "signature": "ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True, exit_on_error=True)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('filename')  # positional argument\n    parser.add_argument('-c', '--count')  # option that takes a value\n    parser.add_argument('-v', '--verbose', action='store_true')  # on/off flag\n    args = parser.parse_args()\n    print(args.filename, args.count, args.verbose)\n\ntest()\n"
            ],
            "description": "Define how a single command-line argument should be parsed.",
            "signature": "add_argument(name or flags..., *[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest][, deprecated])"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--foo', default=42)\n    args = parser.parse_args([])\n    print(args.foo)\n    args = parser.parse_args(['--foo', '2'])\n    print(args.foo)\n\ntest()\n"
            ],
            "description": "Convert argument strings to objects and assign them as attributes of the namespace. Return the populated namespace.",
            "signature": "parse_args(args=None, namespace=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(help='sub-command help')\n    parser_a = subparsers.add_parser('a', help='a help')\n    parser_a.add_argument('bar', type=int, help='bar help')\n    parser_b = subparsers.add_parser('b', help='b help')\n    parser_b.add_argument('--baz', choices=('X', 'Y', 'Z'), help='baz help')\n    args = parser.parse_args(['a', '12'])\n    print(args)\n    args = parser.parse_args(['b', '--baz', 'Z'])\n    print(args)\n\ntest()\n"
            ],
            "description": "Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke subcommands like svn checkout, svn update, and svn commit. Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such subcommands with the add_subparsers() method. The add_subparsers() method is normally called with no arguments and returns a special action object. This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.",
            "signature": "add_subparsers(*[, title][, description][, prog][, parser_class][, action][, dest][, required][, help][, metavar])"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--raw', type=argparse.FileType('wb', 0))\n    parser.add_argument('out', type=argparse.FileType('w', encoding='UTF-8'))\n    args = parser.parse_args(['--raw', 'raw.dat', 'file.txt'])\n    print(args)\n\ntest()\n"
            ],
            "description": "The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument(). Arguments that have FileType objects as their type will open command-line arguments as files with the requested modes, buffer sizes, encodings and error handling (see the open() function for more details):",
            "signature": "FileType(mode='r', bufsize=-1, encoding=None, errors=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser(prog='PROG', add_help=False)\n    group = parser.add_argument_group('group')\n    group.add_argument('--foo', help='foo help')\n    group.add_argument('bar', help='bar help')\n    parser.print_help()\n\ntest()\n"
            ],
            "description": "By default, ArgumentParser groups command-line arguments into \"positional arguments\" and \"options\" when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method:",
            "signature": "add_argument_group(title=None, description=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser(prog='PROG')\n    group = parser.add_mutually_exclusive_group()\n    group.add_argument('--foo', action='store_true')\n    group.add_argument('--bar', action='store_false')\n    args = parser.parse_args(['--foo'])\n    print(args)\n    args = parser.parse_args(['--bar'])\n    print(args)\n\ntest()\n"
            ],
            "description": "Create a mutually exclusive group. argparse will make sure that only one of the arguments in the mutually exclusive group was present on the command line:",
            "signature": "add_mutually_exclusive_group(required=False)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('foo', type=int)\n    parser.set_defaults(bar=42, baz='badger')\n    args = parser.parse_args(['736'])\n    print(args)\n\ntest()\n"
            ],
            "description": "Most of the time, the attributes of the object returned by parse_args() will be fully determined by inspecting the command-line arguments and the argument actions. set_defaults() allows some additional attributes that are determined without any inspection of the command line to be added:",
            "signature": "set_defaults(**kwargs)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--foo', default='badger')\n    default_value = parser.get_default('foo')\n    print(default_value)\n\ntest()\n"
            ],
            "description": "Get the default value for a namespace attribute, as set by either add_argument() or by set_defaults():",
            "signature": "get_default(dest)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.print_usage()\n\ntest()\n"
            ],
            "description": "Print a brief description of how the ArgumentParser should be invoked on the command line. If file is None, sys.stdout is assumed.",
            "signature": "print_usage(file=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.print_help()\n\ntest()\n"
            ],
            "description": "Print a help message, including the program usage and information about the arguments registered with the ArgumentParser. If file is None, sys.stdout is assumed.",
            "signature": "print_help(file=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    usage = parser.format_usage()\n    print(usage)\n\ntest()\n"
            ],
            "description": "Return a string containing a brief description of how the ArgumentParser should be invoked on the command line.",
            "signature": "format_usage()"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    help_message = parser.format_help()\n    print(help_message)\n\ntest()\n"
            ],
            "description": "Return a string containing a help message, including the program usage and information about the arguments registered with the ArgumentParser.",
            "signature": "format_help()"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--foo', action='store_true')\n    parser.add_argument('bar')\n    args, remaining_args = parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])\n    print(args, remaining_args)\n\ntest()\n"
            ],
            "description": "Sometimes a script may only parse a few of the command-line arguments, passing the remaining arguments on to another script or program. In these cases, the parse_known_args() method can be useful. It works much like parse_args() except that it does not produce an error when extra arguments are present. Instead, it returns a two item tuple containing the populated namespace and the list of remaining argument strings.",
            "signature": "parse_known_args(args=None, namespace=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\nclass MyArgumentParser(argparse.ArgumentParser):\n    def convert_arg_line_to_args(self, arg_line):\n        return arg_line.split()\n\ndef test():\n    parser = MyArgumentParser()\n    parser.add_argument('args', nargs='+')\n    with open('args.txt', 'w') as f:\n        f.write('arg1 arg2 arg3')\n    args = parser.parse_args(['@args.txt'])\n    print(args)\n\ntest()\n"
            ],
            "description": "Arguments that are read from a file (see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor) are read one argument per line. convert_arg_line_to_args() can be overridden for fancier reading.",
            "signature": "convert_arg_line_to_args(arg_line)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\nimport sys\n\nclass ErrorCatchingArgumentParser(argparse.ArgumentParser):\n    def exit(self, status=0, message=None):\n        if status:\n            raise Exception(f'Exiting because of an error: {message}')\n        sys.exit(status)\n\ndef test():\n    parser = ErrorCatchingArgumentParser()\n    parser.add_argument('--foo')\n    try:\n        parser.parse_args(['--foo'])\n    except Exception as e:\n        print(e)\n\ntest()\n"
            ],
            "description": "This method terminates the program, exiting with the specified status and, if given, it prints a message to sys.stderr before that. The user can override this method to handle these steps differently:",
            "signature": "exit(status=0, message=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    try:\n        parser.parse_args(['--foo'])\n    except argparse.ArgumentError as e:\n        print(e)\n\ntest()\n"
            ],
            "description": "This method prints a usage message including the message to sys.stderr and terminates the program with a status code of 2.",
            "signature": "error(message)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--foo')\n    parser.add_argument('cmd')\n    parser.add_argument('rest', nargs='*', type=int)\n    args = parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())\n    print(args)\n\ntest()\n"
            ],
            "description": "A number of Unix commands allow the user to intermix optional arguments with positional arguments. The parse_intermixed_args() and parse_known_intermixed_args() methods support this parsing style.",
            "signature": "parse_intermixed_args(args=None, namespace=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--foo')\n    parser.add_argument('cmd')\n    parser.add_argument('rest', nargs='*', type=int)\n    args, remaining = parser.parse_known_intermixed_args('doit 1 --foo bar 2 3'.split())\n    print(args, remaining)\n\ntest()\n"
            ],
            "description": "These parsers do not support all the argparse features, and will raise exceptions if unsupported features are used. In particular, subparsers, and mutually exclusive groups that include both optionals and positionals are not supported.",
            "signature": "parse_known_intermixed_args(args=None, namespace=None)"
        },
        {
            "apps": [
                "# Example usage\n\nimport argparse\n\ndef test():\n    parser = argparse.ArgumentParser()\n    parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))\n    parser.add_argument('--foo', type='hexadecimal integer')\n    args = parser.parse_args(['--foo', '0xFA'])\n    print(args)\n\ntest()\n"
            ],
            "description": "Sometimes it's desirable to use a custom string in error messages to provide more user-friendly output. In these cases, register() can be used to register custom actions or types with a parser and allow you to reference the type by their registered name instead of their callable name.",
            "signature": "register(registry_name, value, object)"
        }
    ]
}
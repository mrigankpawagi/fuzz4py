{
    "apis": [
        {
            "apps": [
                "# imports\nimport glob\n\ndef test(pathname: str, root_dir: str = None, dir_fd: int = None, recursive: bool = False, include_hidden: bool = False):\n    paths = glob.glob(pathname, root_dir=root_dir, dir_fd=dir_fd, recursive=recursive, include_hidden=include_hidden)\n    print(paths)"
            ],
            "description": "Return a possibly empty list of path names that match *pathname*, which must be a string containing a path specification.",
            "signature": "glob(pathname: str, *, root_dir: str = None, dir_fd: int = None, recursive: bool = False, include_hidden: bool = False) -> list[str]"
        },
        {
            "apps": [
                "# imports\nimport glob\n\ndef test(pathname: str, root_dir: str = None, dir_fd: int = None, recursive: bool = False, include_hidden: bool = False):\n    for path in glob.iglob(pathname, root_dir=root_dir, dir_fd=dir_fd, recursive=recursive, include_hidden=include_hidden):\n        print(path)"
            ],
            "description": "Return an iterator which yields the same values as glob() without actually storing them all simultaneously.",
            "signature": "iglob(pathname: str, *, root_dir: str = None, dir_fd: int = None, recursive: bool = False, include_hidden: bool = False) -> typing.Iterator[str]"
        },
        {
            "apps": [
                "# imports\nimport glob\n\ndef test(pathname: str):\n    escaped_path = glob.escape(pathname)\n    print(escaped_path)"
            ],
            "description": "Escape all special characters (?,?, * and [). This is useful if you want to match an arbitrary literal string that may have special characters in it.",
            "signature": "escape(pathname: str) -> str"
        },
        {
            "apps": [
                "# imports\nimport glob\nimport re\n\ndef test(pathname: str, recursive: bool = False, include_hidden: bool = False, seps: typing.Sequence[str] = None):\n    regex_str = glob.translate(pathname, recursive=recursive, include_hidden=include_hidden, seps=seps)\n    print(regex_str)"
            ],
            "description": "Convert a path specification to a regular expression for use with re.match().",
            "signature": "translate(pathname, *, recursive=False, include_hidden=False, seps=None)"
        }
    ]
}
{
    "apis": [
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(*pathsegments):\n    path = Path(*pathsegments)\n    print(path)"
            ],
            "description": "A generic class that represents the system's path flavor (instantiating it creates either a PurePosixPath or a PureWindowsPath).",
            "signature": "Path(*pathsegments) -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import PurePath\n\ndef test(*pathsegments):\n    path = PurePath(*pathsegments)\n    print(path)"
            ],
            "description": "A generic class that represents the system's path flavor (instantiating it creates either a PurePosixPath or a PureWindowsPath).",
            "signature": "PurePath(*pathsegments) -> pathlib.PurePath"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import PurePosixPath\n\ndef test(*pathsegments):\n    path = PurePosixPath(*pathsegments)\n    print(path)"
            ],
            "description": "A subclass of PurePath, this path flavor represents non-Windows filesystem paths.",
            "signature": "PurePosixPath(*pathsegments) -> pathlib.PurePosixPath"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import PureWindowsPath\n\ndef test(*pathsegments):\n    path = PureWindowsPath(*pathsegments)\n    print(path)"
            ],
            "description": "A subclass of PurePath, this path flavor represents Windows filesystem paths.",
            "signature": "PureWindowsPath(*pathsegments) -> pathlib.PureWindowsPath"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import PosixPath\n\ndef test(*pathsegments):\n    path = PosixPath(*pathsegments)\n    print(path)"
            ],
            "description": "A subclass of Path and PurePosixPath, this class represents concrete non-Windows filesystem paths.",
            "signature": "PosixPath(*pathsegments) -> pathlib.PosixPath"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import WindowsPath\n\ndef test(*pathsegments):\n    path = WindowsPath(*pathsegments)\n    print(path)"
            ],
            "description": "A subclass of Path and PureWindowsPath, this class represents concrete Windows filesystem paths.",
            "signature": "WindowsPath(*pathsegments) -> pathlib.WindowsPath"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(uri: str):\n    path = Path.from_uri(uri)\n    print(path)"
            ],
            "description": "Return a new path object from parsing a 'file' URI.",
            "signature": "Path.from_uri(uri: str) -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    uri = path.as_uri()\n    print(uri)"
            ],
            "description": "Represent the path as a 'file' URI.",
            "signature": "as_uri() -> str"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test():\n    home_path = Path.home()\n    print(home_path)"
            ],
            "description": "Return a new path object representing the user's home directory.",
            "signature": "Path.home() -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    expanded_path = path.expanduser()\n    print(expanded_path)"
            ],
            "description": "Return a new path with expanded ~ and ~user constructs.",
            "signature": "expanduser() -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test():\n    cwd_path = Path.cwd()\n    print(cwd_path)"
            ],
            "description": "Return a new path object representing the current directory.",
            "signature": "Path.cwd() -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    absolute_path = path.absolute()\n    print(absolute_path)"
            ],
            "description": "Make the path absolute, without normalization or resolving symlinks.",
            "signature": "absolute() -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, strict: bool = False):\n    resolved_path = path.resolve(strict=strict)\n    print(resolved_path)"
            ],
            "description": "Make the path absolute, resolving all symlinks.",
            "signature": "resolve(strict: bool = False) -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    target_path = path.readlink()\n    print(target_path)"
            ],
            "description": "Return the path to which the symbolic link points.",
            "signature": "readlink() -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    stat_result = path.stat(follow_symlinks=follow_symlinks)\n    print(stat_result)"
            ],
            "description": "Return an os.stat_result object containing information about this path.",
            "signature": "stat(*, follow_symlinks: bool = True) -> os.stat_result"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    stat_result = path.lstat()\n    print(stat_result)"
            ],
            "description": "Like stat() but, if the path points to a symbolic link, return the symbolic link's information rather than its target's.",
            "signature": "lstat() -> os.stat_result"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    exists_bool = path.exists(follow_symlinks=follow_symlinks)\n    print(exists_bool)"
            ],
            "description": "Whether the path points to an existing file or directory.",
            "signature": "exists(*, follow_symlinks: bool = True) -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    is_file_bool = path.is_file(follow_symlinks=follow_symlinks)\n    print(is_file_bool)"
            ],
            "description": "Return True if the path points to a regular file (or a symbolic link pointing to a regular file), False if it points to another kind of file.",
            "signature": "is_file(*, follow_symlinks: bool = True) -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    is_dir_bool = path.is_dir(follow_symlinks=follow_symlinks)\n    print(is_dir_bool)"
            ],
            "description": "Return True if the path points to a directory (or a symbolic link pointing to a directory), False if it points to another kind of file.",
            "signature": "is_dir(*, follow_symlinks: bool = True) -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_symlink_bool = path.is_symlink()\n    print(is_symlink_bool)"
            ],
            "description": "Return True if the path points to a symbolic link, False otherwise.",
            "signature": "is_symlink() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    result = path.is_junction()\n    print(result)"
            ],
            "description": "Return True if the path points to a junction, and False for any other type of file. Currently only Windows supports junctions.",
            "signature": "is_junction() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_mount_bool = path.is_mount()\n    print(is_mount_bool)"
            ],
            "description": "Return True if the path is a mount point: a point in a file system where a different file system has been mounted.",
            "signature": "is_mount() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_socket_bool = path.is_socket()\n    print(is_socket_bool)"
            ],
            "description": "Return True if the path points to a Unix socket (or a symbolic link pointing to a Unix socket), False if it points to another kind of file.",
            "signature": "is_socket() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_fifo_bool = path.is_fifo()\n    print(is_fifo_bool)"
            ],
            "description": "Return True if the path points to a FIFO (or a symbolic link pointing to a FIFO), False if it points to another kind of file.",
            "signature": "is_fifo() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_block_device_bool = path.is_block_device()\n    print(is_block_device_bool)"
            ],
            "description": "Return True if the path points to a block device (or a symbolic link pointing to a block device), False if it points to another kind of file.",
            "signature": "is_block_device() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    is_char_device_bool = path.is_char_device()\n    print(is_char_device_bool)"
            ],
            "description": "Return True if the path points to a character device (or a symbolic link pointing to a character device), False if it points to another kind of file.",
            "signature": "is_char_device() -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, other_path: Path | str):\n    samefile_bool = path.samefile(other_path)\n    print(samefile_bool)"
            ],
            "description": "Return whether this path points to the same file as other_path, which can be either a Path object, or a string.",
            "signature": "samefile(other_path: Path | str) -> bool"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, mode: str = 'r', buffering: int = -1, encoding: str = None, errors: str = None, newline: str = None):\n    with path.open(mode=mode, buffering=buffering, encoding=encoding, errors=errors, newline=newline) as f:\n        # Perform file operations\n        pass"
            ],
            "description": "Open the file pointed by this path and return a file object.",
            "signature": "open(mode='r', buffering=-1, encoding=None, errors=None, newline=None) -> typing.IO"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, encoding: str = None, errors: str = None, newline: str = None):\n    text = path.read_text(encoding=encoding, errors=errors, newline=newline)\n    print(text)"
            ],
            "description": "Return the decoded contents of the pointed-to file as a string.",
            "signature": "read_text(encoding=None, errors=None, newline=None) -> str"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    binary_data = path.read_bytes()\n    print(binary_data)"
            ],
            "description": "Return the binary contents of the pointed-to file as a bytes object.",
            "signature": "read_bytes() -> bytes"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, data: str, encoding: str = None, errors: str = None, newline: str = None):\n    bytes_written = path.write_text(data, encoding=encoding, errors=errors, newline=newline)\n    print(bytes_written)"
            ],
            "description": "Open the file in text mode, write data to it, and close the file.",
            "signature": "write_text(data: str, encoding=None, errors=None, newline=None) -> int"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, data: bytes):\n    bytes_written = path.write_bytes(data)\n    print(bytes_written)"
            ],
            "description": "Open the file in bytes mode, write data to it, and close the file.",
            "signature": "write_bytes(data: bytes) -> int"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    for child in path.iterdir():\n        print(child)"
            ],
            "description": "When the path points to a directory, yield path objects of the directory contents.",
            "signature": "iterdir() -> typing.Iterator[pathlib.Path]"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, pattern: str, case_sensitive: bool = None, recurse_symlinks: bool = False):\n    for match in path.glob(pattern, case_sensitive=case_sensitive, recurse_symlinks=recurse_symlinks):\n        print(match)"
            ],
            "description": "Glob the given relative pattern in the directory represented by this path, yielding all matching files (of any kind).",
            "signature": "glob(pattern: str, *, case_sensitive: bool = None, recurse_symlinks: bool = False) -> typing.Iterator[pathlib.Path]"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, pattern: str, case_sensitive: bool = None, recurse_symlinks: bool = False):\n    for match in path.rglob(pattern, case_sensitive=case_sensitive, recurse_symlinks=recurse_symlinks):\n        print(match)"
            ],
            "description": "This is like calling Path.glob() with \"**/\" added in front of the given relative pattern.",
            "signature": "rglob(pattern: str, *, case_sensitive: bool = None, recurse_symlinks: bool = False) -> typing.Iterator[pathlib.Path]"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, top_down: bool = True, on_error: typing.Callable = None, follow_symlinks: bool = False):\n    for dirpath, dirnames, filenames in path.walk(top_down=top_down, on_error=on_error, follow_symlinks=follow_symlinks):\n        print(dirpath, dirnames, filenames)"
            ],
            "description": "Generate the file names in a directory tree by walking the tree either top-down or bottom-up.",
            "signature": "walk(top_down: bool = True, on_error: typing.Callable = None, follow_symlinks: bool = False) -> typing.Iterator"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, mode: int = 0o666, exist_ok: bool = True):\n    path.touch(mode=mode, exist_ok=exist_ok)"
            ],
            "description": "Create a file at this given path.",
            "signature": "touch(mode: int = 0o666, exist_ok: bool = True) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, mode: int = 0o777, parents: bool = False, exist_ok: bool = False):\n    path.mkdir(mode=mode, parents=parents, exist_ok=exist_ok)"
            ],
            "description": "Create a new directory at this given path.",
            "signature": "mkdir(mode: int = 0o777, parents: bool = False, exist_ok: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, target: Path | str, target_is_directory: bool = False):\n    path.symlink_to(target, target_is_directory=target_is_directory)"
            ],
            "description": "Make this path a symbolic link to target.",
            "signature": "symlink_to(target: Path | str, target_is_directory: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, target: Path | str):\n    path.hardlink_to(target)"
            ],
            "description": "Make this path a hard link to the same file as target.",
            "signature": "hardlink_to(target: Path | str) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, target: Path | str):\n    new_path = path.rename(target)\n    print(new_path)"
            ],
            "description": "Rename this file or directory to the given target, and return a new Path instance pointing to target.",
            "signature": "rename(target: Path | str) -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, target: Path | str):\n    new_path = path.replace(target)\n    print(new_path)"
            ],
            "description": "Rename this file or directory to the given target, and return a new Path instance pointing to target. If target points to an existing file or directory, it will be unconditionally replaced.",
            "signature": "replace(target: Path | str) -> pathlib.Path"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, missing_ok: bool = False):\n    path.unlink(missing_ok=missing_ok)"
            ],
            "description": "Remove this file or symbolic link.  If the path points to a directory, use rmdir() instead.",
            "signature": "unlink(missing_ok: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path):\n    path.rmdir()"
            ],
            "description": "Remove this directory.  The directory must be empty.",
            "signature": "rmdir() -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    owner = path.owner(follow_symlinks=follow_symlinks)\n    print(owner)"
            ],
            "description": "Return the name of the user owning the file.",
            "signature": "owner(*, follow_symlinks: bool = True) -> str"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, follow_symlinks: bool = True):\n    group = path.group(follow_symlinks=follow_symlinks)\n    print(group)"
            ],
            "description": "Return the name of the group owning the file.",
            "signature": "group(*, follow_symlinks: bool = True) -> str"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, mode: int, follow_symlinks: bool = True):\n    path.chmod(mode, follow_symlinks=follow_symlinks)"
            ],
            "description": "Change the file mode and permissions.",
            "signature": "chmod(mode: int, *, follow_symlinks: bool = True) -> None"
        },
        {
            "apps": [
                "# imports\nfrom pathlib import Path\n\ndef test(path: Path, mode: int):\n    path.lchmod(mode)"
            ],
            "description": "Like chmod() but, if the path points to a symbolic link, the symbolic link's mode is changed rather than its target's.",
            "signature": "lchmod(mode: int) -> None"
        }
    ]
}
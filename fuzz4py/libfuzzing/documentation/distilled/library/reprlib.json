{
    "apis": [
        {
            "apps": [
                "# imports\nimport reprlib\n\ndef test(maxlevel: int = 6, maxtuple: int = 6, maxlist: int = 6, maxarray: int = 5, maxdict: int = 4, maxset: int = 6, maxfrozenset: int = 6, maxdeque: int = 6, maxstring: int = 30, maxlong: int = 40, maxother: int = 30, fillvalue: str = '...', indent: int | str | None = None):\n    repr_obj = reprlib.Repr(maxlevel=maxlevel, maxtuple=maxtuple, maxlist=maxlist, maxarray=maxarray, maxdict=maxdict, maxset=maxset, maxfrozenset=maxfrozenset, maxdeque=maxdeque, maxstring=maxstring, maxlong=maxlong, maxother=maxother, fillvalue=fillvalue, indent=indent)\n    print(repr_obj)"
            ],
            "description": "Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for different object types are added to avoid the generation of representations which are excessively long.",
            "signature": "Repr(*, maxlevel: int = 6, maxtuple: int = 6, maxlist: int = 6, maxarray: int = 5, maxdict: int = 4, maxset: int = 6, maxfrozenset: int = 6, maxdeque: int = 6, maxstring: int = 30, maxlong: int = 40, maxother: int = 30, fillvalue: str = '...', indent: int | str | None = None) -> reprlib.Repr"
        },
        {
            "apps": [
                "# imports\nimport reprlib\n\ndef test(obj: object):\n    repr_str = reprlib.repr(obj)\n    print(repr_str)"
            ],
            "description": "This is the repr() method of aRepr. It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes.",
            "signature": "repr(obj: object) -> str"
        },
        {
            "apps": [
                "# imports\nfrom reprlib import recursive_repr\n\nclass MyList(list):\n    @recursive_repr()\n    def __repr__(self):\n        return '<' + '|'.join(map(repr, self)) + '>'\n\ndef test(fillvalue: str = '...'):\n    m = MyList('abc')\n    m.append(m)\n    m.append('x')\n    print(m)"
            ],
            "description": "Decorator for __repr__() methods to detect recursive calls within the same thread. If a recursive call is made, the fillvalue is returned, otherwise, the usual __repr__() call is made.",
            "signature": "recursive_repr(fillvalue='...') -> typing.Callable"
        }
    ]
}
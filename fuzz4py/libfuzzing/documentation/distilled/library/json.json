{
    "apis": [
        {
            "description": "Serialize *obj* as a JSON formatted stream to *fp* (a \".write()\"-supporting *file-like object*) using this conversion table.",
            "name": "json.dump",
            "signature": "dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)"
        },
        {
            "description": "Serialize *obj* to a JSON formatted \"str\" using this conversion table.",
            "name": "json.dumps",
            "signature": "dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)"
        },
        {
            "description": "Deserialize *fp* (a \".read()\"-supporting *text file* or *binary file* containing a JSON document) to a Python object using this conversion table.",
            "name": "json.load",
            "signature": "load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)"
        },
        {
            "description": "Deserialize *s* (a \"str\", \"bytes\" or \"bytearray\" instance containing a JSON document) to a Python object using this conversion table.",
            "name": "json.loads",
            "signature": "loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)"
        },
        {
            "description": "Simple JSON decoder.",
            "name": "json.JSONDecoder",
            "signature": "JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)"
        },
        {
            "description": "Return the Python representation of *s* (a \"str\" instance containing a JSON document).",
            "name": "json.JSONDecoder.decode",
            "signature": "decode(s)"
        },
        {
            "description": "Decode a JSON document from *s* (a \"str\" beginning with a JSON document) and return a 2-tuple of the Python representation and the index in *s* where the document ended.",
            "name": "json.JSONDecoder.raw_decode",
            "signature": "raw_decode(s)"
        },
        {
            "description": "Extensible JSON encoder for Python data structures.",
            "name": "json.JSONEncoder",
            "signature": "JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)"
        },
        {
            "description": "Implement this method in a subclass such that it returns a serializable object for *o*, or calls the base implementation (to raise a \"TypeError\").",
            "name": "json.JSONEncoder.default",
            "signature": "default(o)"
        },
        {
            "description": "Return a JSON string representation of a Python data structure, *o*.",
            "name": "json.JSONEncoder.encode",
            "signature": "encode(o)"
        },
        {
            "description": "Encode the given object, *o*, and yield each string representation as available.",
            "name": "json.JSONEncoder.iterencode",
            "signature": "iterencode(o)"
        }
    ]
}
{
    "apis": [
        {
            "apps": [
                "# imports\n\n\ndef test(obj: str, encoding: str = 'utf-8', errors: str = 'strict'):\n    encoded_obj = codecs.encode(obj, encoding, errors)\n    print(encoded_obj)"
            ],
            "description": "Encodes *obj* using the codec registered for *encoding*. *Errors* may be given to set the desired error handling scheme.",
            "signature": "encode(obj: object, encoding: str = 'utf-8', errors: str = 'strict') -> bytes"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(obj: bytes, encoding: str = 'utf-8', errors: str = 'strict'):\n    decoded_obj = codecs.decode(obj, encoding, errors)\n    print(decoded_obj)"
            ],
            "description": "Decodes *obj* using the codec registered for *encoding*. *Errors* may be given to set the desired error handling scheme.",
            "signature": "decode(obj: object, encoding: str = 'utf-8', errors: str = 'strict') -> str"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    codec_info = codecs.lookup(encoding)\n    print(codec_info)"
            ],
            "description": "Looks up the codec info in the Python codec registry and returns a CodecInfo object.",
            "signature": "lookup(encoding: str) -> codecs.CodecInfo"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    encoder = codecs.getencoder(encoding)\n    print(encoder)"
            ],
            "description": "Look up the codec for the given encoding and return its encoder function.",
            "signature": "getencoder(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    decoder = codecs.getdecoder(encoding)\n    print(decoder)"
            ],
            "description": "Look up the codec for the given encoding and return its decoder function.",
            "signature": "getdecoder(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    incremental_encoder = codecs.getincrementalencoder(encoding)\n    print(incremental_encoder)"
            ],
            "description": "Look up the codec for the given encoding and return its incremental encoder class or factory function.",
            "signature": "getincrementalencoder(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    incremental_decoder = codecs.getincrementaldecoder(encoding)\n    print(incremental_decoder)"
            ],
            "description": "Look up the codec for the given encoding and return its incremental decoder class or factory function.",
            "signature": "getincrementaldecoder(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    reader = codecs.getreader(encoding)\n    print(reader)"
            ],
            "description": "Look up the codec for the given encoding and return its StreamReader class or factory function.",
            "signature": "getreader(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(encoding: str):\n    writer = codecs.getwriter(encoding)\n    print(writer)"
            ],
            "description": "Look up the codec for the given encoding and return its StreamWriter class or factory function.",
            "signature": "getwriter(encoding: str) -> Callable"
        },
        {
            "apps": [
                "# imports\n\n\ndef search_function(encoding):\n    # <search function implementation>\n    pass\n\ndef test():\n    codecs.register(search_function)"
            ],
            "description": "Register a codec search function. Search functions are expected to take one argument, the encoding name, and return a CodecInfo object.",
            "signature": "register(search_function: Callable) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef search_function(encoding):\n    # <search function implementation>\n    pass\n\ndef test():\n    codecs.unregister(search_function)"
            ],
            "description": "Unregister a codec search function and clear the registry's cache.",
            "signature": "unregister(search_function: Callable) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(filename: str, mode: str = 'r', encoding: str = None, errors: str = 'strict', buffering: int = -1):\n    with codecs.open(filename, mode, encoding, errors, buffering) as f:\n        # <file operations>\n        pass"
            ],
            "description": "Open an encoded file using the given mode and return a wrapped version.",
            "signature": "open(filename: str, mode: str = 'r', encoding: str = None, errors: str = 'strict', buffering: int = -1) -> codecs.StreamReaderWriter"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(file: object, data_encoding: str, file_encoding: str = None, errors: str = 'strict'):\n    encoded_file = codecs.EncodedFile(file, data_encoding, file_encoding, errors)\n    # <file operations>\n    encoded_file.close()"
            ],
            "description": "Return a StreamRecoder instance, a wrapped version of file which provides transparent transcoding.",
            "signature": "EncodedFile(file: object, data_encoding: str, file_encoding: str = None, errors: str = 'strict') -> codecs.StreamRecoder"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(iterator: typing.Iterator, encoding: str, errors: str = 'strict'):\n    for item in codecs.iterencode(iterator, encoding, errors):\n        print(item)"
            ],
            "description": "Uses an incremental encoder to iteratively encode the input provided by iterator.",
            "signature": "iterencode(iterator: typing.Iterator, encoding: str, errors: str = 'strict') -> typing.Iterator"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(iterator: typing.Iterator, encoding: str, errors: str = 'strict'):\n    for item in codecs.iterdecode(iterator, encoding, errors):\n        print(item)"
            ],
            "description": "Uses an incremental decoder to iteratively decode the input provided by iterator.",
            "signature": "iterdecode(iterator: typing.Iterator, encoding: str, errors: str = 'strict') -> typing.Iterator"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(name: str, error_handler: Callable):\n    codecs.register_error(name, error_handler)"
            ],
            "description": "Register the error handling function *error_handler* under the name *name*.",
            "signature": "register_error(name: str, error_handler: Callable) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(name: str):\n    error_handler = codecs.lookup_error(name)\n    print(error_handler)"
            ],
            "description": "Return the error handler previously registered under the name *name*.",
            "signature": "lookup_error(name: str) -> Callable"
        }
    ]
}
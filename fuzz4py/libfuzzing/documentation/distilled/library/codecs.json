{
    "apis": [
        {
            "description": "Encodes obj using the codec registered for encoding.",
            "name": "codecs.encode",
            "signature": "encode(obj, encoding='utf-8', errors='strict')"
        },
        {
            "description": "Decodes obj using the codec registered for encoding.",
            "name": "codecs.decode",
            "signature": "decode(obj, encoding='utf-8', errors='strict')"
        },
        {
            "description": "Looks up the codec info in the Python codec registry and returns a CodecInfo object.",
            "name": "codecs.lookup",
            "signature": "lookup(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its encoder function.",
            "name": "codecs.getencoder",
            "signature": "getencoder(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its decoder function.",
            "name": "codecs.getdecoder",
            "signature": "getdecoder(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its incremental encoder class or factory function.",
            "name": "codecs.getincrementalencoder",
            "signature": "getincrementalencoder(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its incremental decoder class or factory function.",
            "name": "codecs.getincrementaldecoder",
            "signature": "getincrementaldecoder(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its StreamReader class or factory function.",
            "name": "codecs.getreader",
            "signature": "getreader(encoding)"
        },
        {
            "description": "Look up the codec for the given encoding and return its StreamWriter class or factory function.",
            "name": "codecs.getwriter",
            "signature": "getwriter(encoding)"
        },
        {
            "description": "Register a codec search function. Search functions are expected to take one argument, being the encoding name in all lower case letters with hyphens and spaces converted to underscores, and return a CodecInfo object. In case a search function cannot find a given encoding, it should return None.",
            "name": "codecs.register",
            "signature": "register(search_function)"
        },
        {
            "description": "Unregister a codec search function and clear the registry's cache. If the search function is not registered, do nothing.",
            "name": "codecs.unregister",
            "signature": "unregister(search_function)"
        },
        {
            "description": "Open an encoded file using the given mode and return an instance of StreamReaderWriter, providing transparent encoding/decoding. The default file mode is 'r', meaning to open the file in read mode.",
            "name": "codecs.open",
            "signature": "open(filename, mode='r', encoding=None, errors='strict', buffering=-1)"
        },
        {
            "description": "Return a StreamRecoder instance, a wrapped version of file which provides transparent transcoding. The original file is closed when the wrapped version is closed.",
            "name": "codecs.EncodedFile",
            "signature": "EncodedFile(file, data_encoding, file_encoding=None, errors='strict')"
        },
        {
            "description": "Uses an incremental encoder to iteratively encode the input provided by iterator. This function is a generator. The errors argument (as well as any other keyword argument) is passed through to the incremental encoder.",
            "name": "codecs.iterencode",
            "signature": "iterencode(iterator, encoding, errors='strict', **kwargs)"
        },
        {
            "description": "Uses an incremental decoder to iteratively decode the input provided by iterator. This function is a generator. The errors argument (as well as any other keyword argument) is passed through to the incremental decoder.",
            "name": "codecs.iterdecode",
            "signature": "iterdecode(iterator, encoding, errors='strict', **kwargs)"
        },
        {
            "description": "Register the error handling function error_handler under the name name. The error_handler argument will be called during encoding and decoding in case of an error, when name is specified as the errors parameter.",
            "name": "codecs.register_error",
            "signature": "register_error(name, error_handler)"
        },
        {
            "description": "Return the error handler previously registered under the name name.",
            "name": "codecs.lookup_error",
            "signature": "lookup_error(name)"
        },
        {
            "description": "Implements the 'strict' error handling.",
            "name": "codecs.strict_errors",
            "signature": "strict_errors(exception)"
        },
        {
            "description": "Implements the 'ignore' error handling.",
            "name": "codecs.ignore_errors",
            "signature": "ignore_errors(exception)"
        },
        {
            "description": "Implements the 'replace' error handling.",
            "name": "codecs.replace_errors",
            "signature": "replace_errors(exception)"
        },
        {
            "description": "Implements the 'backslashreplace' error handling.",
            "name": "codecs.backslashreplace_errors",
            "signature": "backslashreplace_errors(exception)"
        },
        {
            "description": "Implements the 'xmlcharrefreplace' error handling (for encoding within text encoding only).",
            "name": "codecs.xmlcharrefreplace_errors",
            "signature": "xmlcharrefreplace_errors(exception)"
        },
        {
            "description": "Implements the 'namereplace' error handling (for encoding within text encoding only).",
            "name": "codecs.namereplace_errors",
            "signature": "namereplace_errors(exception)"
        },
        {
            "description": "Return the nameprepped version of label.",
            "name": "encodings.idna.nameprep",
            "signature": "nameprep(label)"
        },
        {
            "description": "Convert a label to ASCII, as specified in RFC 3490.",
            "name": "encodings.idna.ToASCII",
            "signature": "ToASCII(label)"
        },
        {
            "description": "Convert a label to Unicode, as specified in RFC 3490.",
            "name": "encodings.idna.ToUnicode",
            "signature": "ToUnicode(label)"
        }
    ]
}
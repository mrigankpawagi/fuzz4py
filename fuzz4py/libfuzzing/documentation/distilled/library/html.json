{
    "apis": [
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(\"Start tag:\", tag)\n        for attr in attrs:\n            print(\"     attr:\", attr)\n\n    def handle_endtag(self, tag):\n        print(\"End tag  :\", tag)\n\n    def handle_data(self, data):\n        print(\"Data     :\", data)\n\n    def handle_comment(self, data):\n        print(\"Comment  :\", data)\n\n    def handle_entityref(self, name):\n        print(\"Entityref:\", name)\n\n    def handle_charref(self, name):\n        print(\"Charref:\", name)\n\n    def handle_decl(self, data):\n        print(\"Decl     :\", data)\n\n    def handle_pi(self, data):\n        print(\"PI      :\", data)\n\n    def unknown_decl(self, data):\n        print(\"Unknown decl:\", data)\n\ndef test(data: str, convert_charrefs: bool = True):\n    parser = MyHTMLParser(convert_charrefs=convert_charrefs)\n    parser.feed(data)\n    parser.close()"
            ],
            "description": "Create a parser instance.",
            "signature": "HTMLParser(*, convert_charrefs: bool = True) -> html.parser.HTMLParser"
        },
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\ndef test(parser: HTMLParser, data: str):\n    parser.feed(data)"
            ],
            "description": "Feed some text to the parser.",
            "signature": "feed(data: str) -> None"
        },
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\ndef test(parser: HTMLParser):\n    parser.close()"
            ],
            "description": "Force processing of all buffered data as if it were followed by an end-of-file mark.",
            "signature": "close() -> None"
        },
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\ndef test(parser: HTMLParser):\n    parser.reset()"
            ],
            "description": "Reset the instance. Loses all unprocessed data.",
            "signature": "reset() -> None"
        },
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\ndef test(parser: HTMLParser):\n    line, offset = parser.getpos()\n    print(line, offset)"
            ],
            "description": "Return current line number and offset.",
            "signature": "getpos() -> tuple[int, int]"
        },
        {
            "apps": [
                "# imports\nfrom html.parser import HTMLParser\n\ndef test(parser: HTMLParser):\n    text = parser.get_starttag_text()\n    print(text)"
            ],
            "description": "Return the text of the most recently opened start tag.",
            "signature": "get_starttag_text() -> str | None"
        }
    ]
}
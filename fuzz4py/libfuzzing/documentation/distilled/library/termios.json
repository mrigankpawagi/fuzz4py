{
    "apis": [
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO):\n    attributes = termios.tcgetattr(fd)\n    print(attributes)"
            ],
            "description": "Return a list containing the tty attributes for file descriptor fd.",
            "signature": "tcgetattr(fd: int | typing.IO) -> list"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO, when: int, attributes: list):\n    termios.tcsetattr(fd, when, attributes)"
            ],
            "description": "Set the tty attributes for file descriptor fd from the attributes, which is a list like the one returned by tcgetattr().",
            "signature": "tcsetattr(fd: int | typing.IO, when: int, attributes: list) -> None"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO, duration: int):\n    termios.tcsendbreak(fd, duration)"
            ],
            "description": "Send a break on file descriptor fd.",
            "signature": "tcsendbreak(fd: int | typing.IO, duration: int) -> None"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO):\n    termios.tcdrain(fd)"
            ],
            "description": "Wait until all output written to file descriptor fd has been transmitted.",
            "signature": "tcdrain(fd: int | typing.IO) -> None"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO, queue: int):\n    termios.tcflush(fd, queue)"
            ],
            "description": "Discard queued data on file descriptor fd.",
            "signature": "tcflush(fd: int | typing.IO, queue: int) -> None"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO, action: int):\n    termios.tcflow(fd, action)"
            ],
            "description": "Suspend or resume input or output on file descriptor fd.",
            "signature": "tcflow(fd: int | typing.IO, action: int) -> None"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO):\n    winsize = termios.tcgetwinsize(fd)\n    print(winsize)"
            ],
            "description": "Return a tuple (ws_row, ws_col) containing the tty window size for file descriptor fd.",
            "signature": "tcgetwinsize(fd: int | typing.IO) -> tuple[int, int]"
        },
        {
            "apps": [
                "# imports\nimport termios\nimport sys\nimport os\n\ndef test(fd: int | typing.IO, winsize: tuple[int, int]):\n    termios.tcsetwinsize(fd, winsize)"
            ],
            "description": "Set the tty window size for file descriptor fd from winsize, which is a two-item tuple (ws_row, ws_col) like the one returned by tcgetwinsize().",
            "signature": "tcsetwinsize(fd: int | typing.IO, winsize: tuple[int, int]) -> None"
        }
    ]
}
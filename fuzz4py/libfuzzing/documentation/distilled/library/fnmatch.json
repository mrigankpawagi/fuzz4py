{
    "apis": [
        {
            "apps": [
                "# imports\nimport fnmatch\nimport os\n\ndef test(name: str, pat: str):\n    print(fnmatch.fnmatch(name, pat))"
            ],
            "description": "Test whether the filename string *name* matches the pattern string *pat*, returning True or False. Both parameters are case-normalized using os.path.normcase().",
            "signature": "fnmatch(name: str, pat: str) -> bool"
        },
        {
            "apps": [
                "# imports\nimport fnmatch\n\ndef test(name: str, pat: str):\n    print(fnmatch.fnmatchcase(name, pat))"
            ],
            "description": "Test whether the filename string *name* matches the pattern string *pat*, returning True or False; the comparison is case-sensitive and does not apply os.path.normcase().",
            "signature": "fnmatchcase(name: str, pat: str) -> bool"
        },
        {
            "apps": [
                "# imports\nimport fnmatch\n\ndef test(names: list, pat: str):\n    filtered_names = fnmatch.filter(names, pat)\n    print(filtered_names)"
            ],
            "description": "Construct a list from those elements of the iterable *names* that match pattern *pat*. It is the same as \"[n for n in names if fnmatch(n, pat)]\", but implemented more efficiently.",
            "signature": "filter(names: list, pat: str) -> list"
        },
        {
            "apps": [
                "# imports\nimport fnmatch\nimport re\n\ndef test(pat: str):\n    regex = fnmatch.translate(pat)\n    print(regex)\n    reobj = re.compile(regex)\n    print(reobj.match('foobar.txt'))"
            ],
            "description": "Return the shell-style pattern *pat* converted to a regular expression for using with re.match().",
            "signature": "translate(pat: str) -> str"
        }
    ]
}
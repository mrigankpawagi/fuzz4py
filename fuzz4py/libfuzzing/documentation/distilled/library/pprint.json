{
    "apis": [
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object, stream: typing.IO = None, indent: int = 1, width: int = 80, depth: int = None, compact: bool = False, sort_dicts: bool = False, underscore_numbers: bool = False):\n    pprint.pp(obj, stream=stream, indent=indent, width=width, depth=depth, compact=compact, sort_dicts=sort_dicts, underscore_numbers=underscore_numbers)"
            ],
            "description": "Prints the formatted representation of object, followed by a newline.",
            "signature": "pp(obj: object, stream: typing.IO = None, indent: int = 1, width: int = 80, depth: int = None, *, compact: bool = False, sort_dicts: bool = False, underscore_numbers: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object, stream: typing.IO = None, indent: int = 1, width: int = 80, depth: int = None, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False):\n    pprint.pprint(obj, stream=stream, indent=indent, width=width, depth=depth, compact=compact, sort_dicts=sort_dicts, underscore_numbers=underscore_numbers)"
            ],
            "description": "Prints the formatted representation of object, followed by a newline.",
            "signature": "pprint(obj: object, stream: typing.IO = None, indent: int = 1, width: int = 80, depth: int = None, *, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object, indent: int = 1, width: int = 80, depth: int = None, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False):\n    formatted_str = pprint.pformat(obj, indent=indent, width=width, depth=depth, compact=compact, sort_dicts=sort_dicts, underscore_numbers=underscore_numbers)\n    print(formatted_str)"
            ],
            "description": "Return the formatted representation of object as a string.",
            "signature": "pformat(obj: object, indent: int = 1, width: int = 80, depth: int = None, *, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False) -> str"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object):\n    readable_bool = pprint.isreadable(obj)\n    print(readable_bool)"
            ],
            "description": "Determine if the formatted representation of object is readable.",
            "signature": "isreadable(obj: object) -> bool"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object):\n    recursive_bool = pprint.isrecursive(obj)\n    print(recursive_bool)"
            ],
            "description": "Determine if object requires a recursive representation.",
            "signature": "isrecursive(obj: object) -> bool"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(obj: object):\n    safe_repr = pprint.saferepr(obj)\n    print(safe_repr)"
            ],
            "description": "Return a string representation of object, protected against recursion in some common data structures.",
            "signature": "saferepr(obj: object) -> str"
        },
        {
            "apps": [
                "# imports\nimport pprint\n\ndef test(indent: int = 1, width: int = 80, depth: int = None, stream: typing.IO = None, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False):\n    pretty_printer = pprint.PrettyPrinter(indent=indent, width=width, depth=depth, stream=stream, compact=compact, sort_dicts=sort_dicts, underscore_numbers=underscore_numbers)\n    print(pretty_printer)"
            ],
            "description": "Construct a PrettyPrinter instance.",
            "signature": "PrettyPrinter(indent: int = 1, width: int = 80, depth: int = None, stream: typing.IO = None, *, compact: bool = False, sort_dicts: bool = True, underscore_numbers: bool = False) -> pprint.PrettyPrinter"
        }
    ]
}
{
    "apis": [
        {
            "apps": [
                "# imports\n\n\ndef test(x: object, first_line: int = None, current_offset: int = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False):\n    bytecode = dis.Bytecode(x, first_line=first_line, current_offset=current_offset, show_caches=show_caches, adaptive=adaptive, show_offsets=show_offsets)\n    for instr in bytecode:\n        print(instr.opname)"
            ],
            "description": "Analyze the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object.",
            "signature": "Bytecode(x: object, *, first_line: int = None, current_offset: int = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False) -> dis.Bytecode"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(tb: object, show_caches: bool = False):\n    bytecode = dis.Bytecode.from_traceback(tb, show_caches=show_caches)\n    for instr in bytecode:\n        print(instr.opname)"
            ],
            "description": "Construct a Bytecode instance from the given traceback, setting current_offset to the instruction responsible for the exception.",
            "signature": "Bytecode.from_traceback(tb, *, show_caches: bool = False) -> dis.Bytecode"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(x: object):\n    code_info_str = dis.code_info(x)\n    print(code_info_str)"
            ],
            "description": "Return a formatted multi-line string with detailed code object information for the supplied function, generator, asynchronous generator, coroutine, method, source code string or code object.",
            "signature": "code_info(x: object) -> str"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(x: object, file: object = None):\n    dis.show_code(x, file=file)"
            ],
            "description": "Print detailed code object information for the supplied function, method, source code string or code object to *file* (or sys.stdout if *file* is not specified).",
            "signature": "show_code(x: object, *, file: object = None) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(x: object = None, file: object = None, depth: int = None, show_caches: bool = False, adaptive: bool = False):\n    dis.dis(x, file=file, depth=depth, show_caches=show_caches, adaptive=adaptive)"
            ],
            "description": "Disassemble the x object. x can denote either a module, a class, a method, a function, a generator, an asynchronous generator, a coroutine, a code object, a string of source code or a byte sequence of raw bytecode.",
            "signature": "dis(x: object = None, *, file: object = None, depth: int = None, show_caches: bool = False, adaptive: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(tb: object = None, file: object = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False):\n    dis.distb(tb, file=file, show_caches=show_caches, adaptive=adaptive, show_offsets=show_offsets)"
            ],
            "description": "Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed.",
            "signature": "distb(tb: object = None, *, file: object = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(code: object, lasti: int = -1, file: object = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False):\n    dis.disassemble(code, lasti, file=file, show_caches=show_caches, adaptive=adaptive, show_offsets=show_offsets)"
            ],
            "description": "Disassemble a code object, indicating the last instruction if lasti was provided.",
            "signature": "disassemble(code: object, lasti: int = -1, *, file: object = None, show_caches: bool = False, adaptive: bool = False, show_offsets: bool = False) -> None"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(x: object, first_line: int = None, show_caches: bool = False, adaptive: bool = False):\n    for instr in dis.get_instructions(x, first_line=first_line, show_caches=show_caches, adaptive=adaptive):\n        print(instr.opname)"
            ],
            "description": "Return an iterator over the instructions in the supplied function, method, source code string or code object.",
            "signature": "get_instructions(x: object, *, first_line: int = None, show_caches: bool = False, adaptive: bool = False) -> typing.Iterator[dis.Instruction]"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(code: object):\n    for offset, lineno in dis.findlinestarts(code):\n        print(offset, lineno)"
            ],
            "description": "This generator function uses the co_lines() method of the code object *code* to find the offsets which are starts of lines in the source code.",
            "signature": "findlinestarts(code: object) -> typing.Iterator[tuple[int, int]]"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(code: object):\n    labels = dis.findlabels(code)\n    print(labels)"
            ],
            "description": "Detect all offsets in the code object code which are jump targets, and return a list of these offsets.",
            "signature": "findlabels(code: object) -> list[int]"
        },
        {
            "apps": [
                "# imports\n\n\ndef test(opcode: int, oparg: object = None, jump: bool = None):\n    stack_effect_value = dis.stack_effect(opcode, oparg, jump=jump)\n    print(stack_effect_value)"
            ],
            "description": "Compute the stack effect of opcode with argument oparg.",
            "signature": "stack_effect(opcode: int, oparg: object = None, *, jump: bool = None) -> int"
        }
    ]
}
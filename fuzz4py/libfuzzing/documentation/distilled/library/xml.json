{
    "apis": [
        {
            "apps": [
                "# imports\nimport xml.dom.minidom\n\ndef test(filename_or_file: str | typing.IO, parser: typing.Any = None, bufsize: int = None):\n    doc = xml.dom.minidom.parse(filename_or_file, parser, bufsize)\n    # Work with doc\n    doc.unlink()"
            ],
            "description": "Return a Document from the given input.",
            "signature": "parse(filename_or_file: str | typing.IO, parser: typing.Any = None, bufsize: int = None) -> xml.dom.minidom.Document"
        },
        {
            "apps": [
                "# imports\nimport xml.dom.minidom\n\ndef test(string: str, parser: typing.Any = None):\n    doc = xml.dom.minidom.parseString(string, parser)\n    # Work with doc\n    doc.unlink()"
            ],
            "description": "Return a Document that represents the string.",
            "signature": "parseString(string: str, parser: typing.Any = None) -> xml.dom.minidom.Document"
        },
        {
            "apps": [
                "# imports\nfrom xml.dom.minidom import getDOMImplementation\n\ndef test():\n    impl = getDOMImplementation()\n    newdoc = impl.createDocument(None, \"some_tag\", None)\n    top_element = newdoc.documentElement\n    text = newdoc.createTextNode('Some textual content.')\n    top_element.appendChild(text)\n    # Work with newdoc\n    newdoc.unlink()"
            ],
            "description": "Creates a DOMImplementation object.",
            "signature": "getDOMImplementation() -> xml.dom.minidom.DOMImplementation"
        }
    ]
}